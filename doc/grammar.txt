FORMAL GRAMMAR DESCRIPTION:

(* this is a multiline comment *)
// this is also a comment, but single line

const:
   [0-9]+

ident:
   [:alpha:] [:alnum:]*

var:       
   ident

rf:
   expr

expr:
   add-expr
  
primary-expr: const 
    | var
    | fun-call
    | "(" expr ")"

mult-expr: primary-expr [ "*" mult-expr ]
add-expr: mult-expr [ addop mult-expr ]
addop: "+" | "-"

rel-expr: expr rel-op expr
rel-op: ">" | ">=" | "<" | "<=" | "<>" | "=" 

bool-expr: rel-expr [ bool-op bool-expr ]
bool-op: "and" | "or"

stm-list: stm [ ";" stm-list]

stm: "skip"
   | "if" bool-expr "then" stm-list [";"] "else" stm-list [";"] "end" "if"
   | "while" bool-expr "bound" "(" expr "," expr ")" "do" stm-list [";"] "end" "while"
   | var ":=" expr
   | fun-call

fun-call: | ident "(" arg-list ")"
          | ident "::" ident "(" arg-list ")"
     

fundef: "function" ident "(" parm-ety ")" stm-list [";"] "end" "function"

parm-ety: $ | parm
parm: var ["," parm]
arg-ety: $ | arg
arg: expr ["," expr]

def-list: $ | fundef def-list

prog: def-list

PRAGMATICS:

Variable's in the grammar can denote both /program variables/ and /parameters/.
Any variable that is assigned to is a program variable.
Only variables appearing in function parameter lists are parameters.

It is an error to use uninitialized variables (since they are neither program
variable nor parameters).

Only parameters may appear in ranking functions ('rf'), since otherwise we
cannot guarantee that each loop iteration takes the same amount of time.

Similarly, only parameters may appear as arguments to non-component functions.

