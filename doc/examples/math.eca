import component ecalogic.MyFancyCpu as cpu
import component ecalogic.Foo
import component ecalogic.bar.Foo as Baz

function pow(X,Y)
  pow := 1;
  while Y > 0 bound Y do
    pow := pow * X;
    Y := Y-1
  end while
end function

function log(G,X)
  A := 1;
  log := 0;
  while A < X bound X do
    A := A*G;
    log := log+1
  end while;
  log := log-1
end function

function sqrt(X)
  sqrt := 1;
  while sqrt*sqrt < X bound X do
    sqrt := sqrt+1
  end while;
  sqrt := sqrt-1
end function

function div(X,Y)
  div := 0;
  while X >= Y bound X do
    X := X-Y;
    div := div+1;
  end while
end function

function mod(X,Y)
  mod := X-Y*div(X,Y)
end function

function norror(X,P)
  Y := 1;
  (* find the inverse of X mod P, if it exists at all *)
  while Y <= P bound P do
    if mod(Y*X, 1709) = 1 then
      Xinv := Y
    else
      skip
    end if;
    Y := Y + 1
  end while;

  (* >:) *)
  Y := 1;
  while Y <= Xinv bound Xinv do
    Y := Y+1
  end while;

  (* >:) *)
  Y := 1;
  if mod(Xinv,2) = 0 then
    A := X
  else
    A := P
  end if;

  while Y <= A bound A do
    component_::doSomething()
  end while;

  horror := X
end function
