week                  SDR-activiteit
===============================================
2013-W36 ( 2- 6 Sep):
2013-W37 ( 9-13 Sep):
--------------------------> Milestone #0: aan de slag!
2013-W38 (16-20 Sep):
2013-W39 (23-27 Sep):
--------------------------> Milestone #1: bruikbare AST maken uit een .eca
2013-W40 (30- 4 Oct): Presentaties voorbereiden
2013-W41 ( 7-11 Oct): Presentaties "new project requirements"
2013-W42 (14-18 Oct): presentaties "new project requirements"
2013-W43 (21-25 Oct):
--------------------------> Milestone #2: analyse met een hardcoded model
2013-W44 (28- 1 Nov): *Kwartaalbreak/tentamenperiode?
2013-W45 ( 4- 8 Nov): *Kwartaalbreak/tentamenperiode?
2013-W46 (11-15 Nov):
2013-W47 (18-22 Nov): Presentatie voorbereiden
2013-W48 (25-29 Nov): Presentaties "global design"  <-@ THIS IS NOW
--------------------------> Milestone #3: component model, analysis complete
2013-W49 ( 2- 6 Dec): Presentaties "global design"
2013-W50 ( 9-13 Dec):
2013-W51 (16-20 Dec):
--------------------------> Milestone #4: PROJECT DEADLINE _|_

2013-W52 (23-27 Dec): *Kerstbreak
2013-W53 (30- 3 Jan): *Kerstbreak/hertentamens?
2014-W01 ( 6-10 Jan): Evaluatie/feedback, tentamenvoorbereiding
2014-W02 (13-17 Jan): presentaties "improved design"
2014-W03 (20-24 Jan): *Tentamenperiode
2014-W04 (27-31 Jan): *Tentamenperiode + tentamen SDR
===============================================

Opmerkingen:

Voor Milestone #1 is het niet nodig dat de syntax/type-regels van de taal al geheel vastligt;
het gaat er hier puur om dat we een begin van het project hebben.

Kleinere milestones voorafgaand aan Milestone #2:
- consistency checks op taalconstructies (recursie verbieden, identifiers matchen, e.d.)
- afleiding aan de hand van een triviaal 'component model' (bv: het aantal skip statements)
- afleiding aan de hand van een hardcoded component model

Voordat we richting Milestone #3 kunnen werken moet er nog een keuze gemaakt worden:
- variabel component model; hierbij zijn twee keuzes mogelijk
  1) components specificeren via een embedded DSL binnenin Scala
  2) ECA-systeem uitbreiden met constructies om componenten te specificeren

Als extra toevoeging voor milestone #4 is voorlopig het streven:
- Een simpele webinterface

UPDATE:

Planning om nog te completeren voor Milestone #2
- korte termijn:
  Jascha: external DSL pre-ontwerp, internal DSL componentmodel-registratie
  Marc: variable substitutie bij function calls, mogelijkheid tot expressies als waardes?
  Dorus: scala-test's

Daarna (nav. gesprek Rody) re-plannen.

REPLANNING:

-?create examples and tests en documentatie
- polynomials
- fix while
-*runtime variable analysis (annotations?)
- interpreter/transduceerder
  -*externe DSL implementeren,integreren
  - interne DSL: return values?

eerste 3 weken:
-?create examples and tests                  => web app using lift
- polynomials                                DONE
- fix while                                  DONE
-*runtime variable analysis (annotations?)   TODO
- interpreter/transduceerder                 PARTIAL
-*externe DSL implementeren,integreren       DONE

drie weken:
- annotated program as output(?)
- documentatie (friendlyHelpMsg)

